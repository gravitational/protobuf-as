type i8 = number;
type i16 = number;
type i32 = number;
type i64 = bigint;
type isize = number;
type u8 = number;
type u16 = number;
type u32 = number;
type u64 = bigint;
type usize = number;
type f32 = number;
type f64 = number;
type bool = boolean | number;
export class Decoder {
  static wrap(ptr: usize): Decoder;
  valueOf(): usize;
  view: usize;
  pos: i32;
  constructor(view: usize);
  eof(): bool;
  get byteLength(): i32;
  tag(): u32;
  varint(): u64;
  int32(): i32;
  int64(): i64;
  uint32(): u32;
  uint64(): u64;
  sint32(): i32;
  sint64(): i64;
  fixed32(): u32;
  sfixed32(): i32;
  fixed64(): u64;
  sfixed64(): i64;
  float(): f32;
  double(): f64;
  bool(): bool;
  string(): usize;
  bytes(): usize;
  skipType(wireType: u32): void;
  skip(length: u32): void;
}
export const memory: WebAssembly.Memory;
export const __setArgumentsLength: ((n: i32) => void) | undefined;
